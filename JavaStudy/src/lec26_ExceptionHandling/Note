예외처리: 프로그램에 문제가 발생했을 때 시스템 동작에 문제가 없도록 막는 것
Exception vs Error
Exception(예외): 개발자가 구현한 로직에서 발생한 실수나 사용자의 영향에 의해 발생
개발자가 미리 예측하여 방지할 수 있기에 상황에 맞는 예외처리 필요

Error: 시스템이 종료되어야 할 수준의 상황과 같이 수습할 수 없는 심각한 문제
개발자가 미리 예측하여 방지할 수 없음

Exception의 종류
-Checked Exception: 예외처리를 반드시 해야하는 경우(네트워크, 파일 시스템)
-Unchecked Exception: 예외처리를 개발자의 판단에 맡기는 경우(데이터 오류 등)

Exception 클래스
하위클래스로 
-NullPointerException(객체를 가리키지 않고 있는 레퍼런스 이용)
-ArrayIndexOutOfBoundException(배열 크기를 초과한 인덱스 사용 등)
-NumberFormatException(숫자데이터에 문자데이터 등을 넣었을 때)
등이 존재

try{
예외가 발생할 수 있는 코드
} catch (Exception e){
예외가 발생했을 때 처리할 코드
}

finally
예외 발생 여부에 상관없이 언제나 실행

throws
예외 발생시 예외처리를 직접 하지 않고 호출한 곳으로 넘긴다


